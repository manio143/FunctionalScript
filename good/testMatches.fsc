let (|>) x f = f(x)
let (<|) f x = f(x)

//Match on lists

let list1 = [1..5]

let head x =
    match x with
    | [a] -> a
    | _ -> die("Head of empty list")

let head2 x =
    match x with
    | (a:as) -> a
    | [] -> die("Head of empty list")

let tail x =
    match x with
    | (a:as) -> as
    | [] -> die("Tail of empty list")

let contains3 x =
    match x with
    | [...3...] -> True
    | _ -> False

let elem x l =
    match l with
    | (h:t) -> if h == x then True else elem(x,t)
    | [] -> False

let twoFirstElements x =
    match x with
    | [a,b] -> (a,b)
    | _ -> die("Insufficient number of elements in list")

let twoFirstElements2 x =
    match x with
    | (a:(b:as)) -> (a,b)
    | _ -> die("Insufficient number of elements in list")

let firstElementWhenSecondIs2Or0 x =
    match x with
    | [a,2] -> a
    | _ -> 0

let listMatchTest () =
    do printStr("List match test")
    do print <| (list1 |> head)     //1
    do print <| (list1 |> head2)    //1
  //do print <| head([])
  //do print <| head2([])
    do print <| (list1 |> tail)     //[2,3,4,5]
    do print <| contains3(list1) == elem(3, list1)  //True
    do print <| (list1 |> twoFirstElements)     //(1,2)
    do print <| (list1 |> twoFirstElements2)    //(1,2)
    do print <| firstElementWhenSecondIs2Or0(list1)     //1
    do print <| firstElementWhenSecondIs2Or0([1,3])     //0
    ()

//Match on tuples

let k = (4, 5, "abc", 'f')

let fst x = // works for every tuple
    match x with
    | (a, _) -> a

let snd x = // works for every tuple
    match x with
    | (_, a) -> a

let thd x = // needs a tuple with with 3 or more elements
    match x with
    | (_, _, a) -> a

let fthIfThdIsABC x =
    match x with
    | (_,_,"abc",a) -> a

let tupleMatchTest () =
    do printStr("Tuple match test")
    do print <| fst(k)  //4
    do print <| snd(k)  //5
    do print <| thd(k)  //"abc"
  //do print <| thd((1,2)) // type check error
    do print <| fthIfThdIsABC(k)    //'f'
  //do print <| fthIfThdIsABC((1,1,"",1))   //Non-exhaustive pattern matching
    ()

// Match on records

let r = { A = 1; B = 2; C = "abc" }

let aOfBOf2 x =
    match x with
    | {A = a; B = 2} -> a

let aOfBOf22 x =
    match x with
    | {B = 2} -> x.A

let recordMatchTest () =
    do printStr("Record match test")
    do print <| aOfBOf2(r)  //1
    do print <| aOfBOf22(r) //1
    ()

// Match on constructors

data T = A | B | C of Number

let isAorB t =
    match t with
    | A -> True
    | B -> True
    | _ -> False

let Surprise = C(10)

let num t =
    match t with
    | Surprise -> -1    //any existing variable starting with capital letter is considered a constructor
    | C(a) -> a
    | _ -> die("")

let numT t = if isAorB(t) then 0 else num(t)

let unionMatchTest () =
    do printStr("Union match test")
    do print <| numT(A)     //0
    do print <| numT(B)     //0
    do print <| numT(C(1))  //1
    do print <| numT(C(10))  //-1
    ()

let main _ =
    do listMatchTest(())
    do tupleMatchTest(())
    do recordMatchTest(())
    do unionMatchTest(())
    0