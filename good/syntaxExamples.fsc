/* To jest komentarz */
// To jest komentarz do końca linii


// deklaracje stałych z prostymi wyrażeniami
let i = 10
let d = 1.2
let c = 'a'
let s = "abc"

// deklaracje prostych funkcji
let mat x y = x * 10 + y
let mat2 x = let y = x * 10 in y + 1

let multiline x =
    let a = 10
    let b = 1
    x * a + b

let conditional x = if x >= 1 then 1 else 0

// deklaracje stałych z bardziej złożonymi wartościami
let list = [1,2,3,4]
let lh = 1:2:[]
let tuple = (1, "a", 'c')
let rekord = {A = "s"; B = 1}
let suma = \x y -> x + y

// deklaracja operatora
let (<?>) a b = if a <= 0 then b else a
let (<|) f x = f(x)

// dekonstrukcja
let [first, second] = list
let (ai,bs) = tuple
let {A -> str} = rekord
let (hd:tl) = list

// dekonstrukcja przez let wewnątrz funkcji
let fst k = let (x,_) = k in x
let snd k = let (_,x) = k in x
let zipF l1 l2 = //length(l1) == length(l2)
    let (x:xs) = l1
    let (y:ys) = l2 in
    (x,y) : zipF(xs,ys)
let recAB x = let { A -> a; B -> b } = x in (a,b)
let deep x = let (_, [{A -> (f,_)}]) = x in f

let deepTest = deep((1, [{A = ('a','b','c')}])) //'a'

// pattern matching
let listMatches =
    match list with
    | [3] -> ()         // pierwszy element listy to 3
    | [1,2] -> ()       // pierwsze dwa elementy listy to 1 i 2
    | [...3...] -> ()   // lista zawierająca wartość 3
    | (h:t) -> ()       // dekonstrukcja
    | [] -> ()          // lista jest pusta
    | [a,b] -> ()       // dekonstrukcja pierwszych dwóch wartości

let tupleMatches =
    match tuple with
    | (1, "b") -> ()    // pierwsze dwie składowe tupla to 1 i "b"
    | (a, "b") -> ()      // przypisz pierwszą składową na a 
                        // i zwróć wyrażenie jeśli druga składowa to 1
    | (a, b) -> ()      // przypisz dwie pierwsze składowe na stałe a i b

let recordMatches =
    match rekord with
    | {A = var} -> ()   // przypisz na stałą var wartość pola A rekordu
    | {A = "ss" } -> ()   // zwróć wyrażenie jeśli pole A rekordu ma wartość 500
    | _ -> ()           // w przeciwnym wypadku

// funkcja z adnotacją
@map :: (a -> b) -> [a] -> [b]
let map f l = 
    match l with
    | (x:xs) -> f(x) : map(f, xs)
    | [] -> []
// funkcje są domyślnie rekurencyjne

// deklaracje typów
data Tree<a> = Empty | Node of a * (Tree<a>) * (Tree<a>)
type F<a,b,c> = (a -> b) -> (b -> c) -> a -> c
type IntTree = Tree<Number>
type Person = {Name :: String; Age :: Number}
type Teacher extends Person with {Pupils :: [Person]}

@combine :: F<a,b,c>
//jeśli wszystkie argumenty typu są generyczne to można je pominąć
//@combine :: F
let combine f g = \x -> g(f(x))
let (>>) = combine
let (<<) f g = combine(g, f)

let matchUnion tree =
    match tree with
    | Empty -> ()
    | Node((1, tl, Node((x,tll, trr)))) -> ()

// deklaracje wartości rekordów
let Bob = {Name = "Bob"; Age = 12}
let Susan = {Bob with Name = "Susan"}
let BobInWork = {Bob with Pupils = [Susan]}

// odwołanie się do pola
//@getName :: Person -> String
let getName p = p.Name

// @ pup :: Teacher -> [Person]
// let pup t = t.Pupils

let head_ = head

//@getFirstPupil :: Teacher -> Person
let getFirstPupil t = head <| t.Pupils

let typeTest () =
    let n1 = getName(Bob)
    let n2 = getName(BobInWork)
    //let fp1 = getFirstPupil(Bob) -- error: getFirstPupil requires additional property 'Pupils' to be present in record `t`
    let fp2 = getFirstPupil(BobInWork)
    //parsing error: let cannot be the last expression
    () //added () so that next function is parsed

@main :: [String] -> Number
let main args =
    do printStr("Gimme a number:")
    let i = toNum <| readln(())
    if i + 1 == 1 do printStr("You wrote 0")
    do printStr <| "When increased by 1 it's: " ++ toString(i + 1)
    do typeTest(())
    do __dump_store(())
    0

// do <=> let _ =
// if cond do e <=> let _ = if cond then e else ()
// więc `do` wymaga wyrażenia typu `()`
