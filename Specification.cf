comment "//" ;
comment "(*" "*)" ;

token TypeToken ({"type"}) ;
token LetToken ({"let"}) ;
token DataToken ({"data"}) ;

token Identifier ((letter | '_') (letter | digit | '_')* );

token OpArithmeticT ({"**"} | {"***"} | '%' | '^' | '&' | {"&&&"} | {"|||"} | {"++"}| {"--"}) ;
token OpArithmeticS ('*' | '/') ;
token OpArithmeticF ('+' | '-') ;
token OpRightSubArithmetic ({"||"} | {">>"} | {"<=>"} | {"==>"} | {">=>"} | {"~>"} | {"=>>"} | {">>="}) ;
token OpLeftSubArithmetic ({"<<"} | {"<=="} | {"<=<"} | {"<~"} | {"<<="} | {"=<<"}) ;
token OpComparison ('<' | {"<="} | {"=="} | {"==="} | '>' | {">="} | {"!="} | {"/="} | {"=/="} | {"!=="} | {"/=="}) ;
token OpLeftPipe ({"<|"} | {"<||"} | {"<|||"} | {"<$>"} | {"<$"}) ;
token OpRightPipe ({"|>"} | {"||>"} | {"|||>"} | {"$>"}) ;

token Operator (["!#$%^&*-+|/?><"]+);

ATOp.                   Op ::= OpArithmeticT ;
ASOp.                   Op ::= OpArithmeticS ;
AFOp.                   Op ::= OpArithmeticF ;
RSOp.                   Op ::= OpRightSubArithmetic ;
LSOp.                   Op ::= OpLeftSubArithmetic ;
COp.                    Op ::= OpComparison ;
LPOp.                   Op ::= OpLeftPipe ;
RPOp.                   Op ::= OpRightPipe ;
UserDefinedOp.          Op ::= Operator ;

Parameter.              Param ::= Identifier ;
Unit.                   Param ::= "()" ;
WildCard.               Param ::= "_" ;
separator Param "" ;

entrypoints Program ;

Program.                Program ::= [Declaration]  ;

TypeDeclaration.        Declaration ::= TypeToken Identifier TypeParam TypeDefinition ;
DataTypeDeclaration.    Declaration ::= DataToken Identifier TypeParam "=" StartingUnionSep [UnionDefinition] ;
TypeAnnotation.         Declaration ::= "@" Identifier "::" Type ;
ValueDeclaration.       Declaration ::= LetToken BindPattern "=" Expression ;
separator Declaration "" ;

TypeParam.              TypeParam ::= "<" [TypeIdentifier] ">" ;
EmptyTypeParam.         TypeParam ::= ;

TypeIdentifier.         TypeIdentifier ::= Identifier;
separator TypeIdentifier "," ;

TDAlias.                TypeDefinition ::= "=" Type ;
TDRecord.               TypeDefinition ::= "=" "{" [RecordFieldType] "}" ;
TDExtension.            TypeDefinition ::= "extends" Identifier "with" "{" [RecordFieldType] "}" ;

RecordFieldType.        RecordFieldType ::= Identifier "::" Type ;
separator RecordFieldType ";" ;

UDEnum.                 UnionDefinition ::= Identifier ;
UDTyped.                UnionDefinition ::= Identifier "of" Type ;
separator UnionDefinition "|" ;

SUSP.                   StartingUnionSep ::= "|" ;
SUSE.                   StartingUnionSep ::= ;

_.                      Type ::= Type2 ;
_.                      Type2 ::= Type3 ;
TFunction.              Type ::= Type2 "->" Type ;
TTuple.                 Type2 ::= [Type3] ;
TList.                  Type3 ::= "[" Type "]" ;
TUnit.                  Type3 ::= "()" ;
TByName.                Type3 ::= Identifier ExactTypeParam ;
TRecord.                Type3 ::= "{" [RecordFieldType] "}" ;
TParenthesis.           Type3 ::= "(" Type ")" ;

separator Type3 "*" ;
separator Type "," ;

ExTypeParam.            ExactTypeParam ::= "<" [Type] ">" ;
ExEmptyTypeParam.       ExactTypeParam ::= ;

Char.                   Literal ::= Char ;
String.                 Literal ::= String ;
Integer.                Literal ::= Integer ;
Float.                  Literal ::= Double ;
UnitValue.              Literal ::= "()" ;

_.                      Expression ::= Expression2 ;
_.                      Expression2 ::= Expression3 ;
_.                      Expression3 ::= Expression4 ;
_.                      Expression4 ::= Expression5 ;
_.                      Expression5 ::= Expression6 ;
_.                      Expression6 ::= Expression7 ;
_.                      Expression7 ::= Expression8 ;
_.                      Expression8 ::= Expression9 ;
_.                      Expression9 ::= Expression10 ;
_.                      Expression10 ::= Expression11 ;
_.                      Expression11 ::= Expression12 ;
_.                      Expression12 ::= Expression13 ;
EOpUser.                Expression ::= Expression Operator Expression2;
EOpRightPipe.           Expression2 ::= Expression2 OpRightPipe Expression3 ;
EOpLeftPipe.            Expression3 ::= Expression4 OpLeftPipe Expression3 ;
EOpComp.                Expression4 ::= Expression5 OpComparison Expression5 ;
EOpRightSubArithmetic.  Expression5 ::= Expression5 OpRightSubArithmetic Expression6 ;
EOpLeftSubArithmetic.   Expression6 ::= Expression7 OpLeftSubArithmetic Expression6 ;
EOpArithmeticF.         Expression7 ::= Expression7 OpArithmeticF Expression8 ;
EOpArithmeticS.         Expression8 ::= Expression8 OpArithmeticS Expression9 ;
EOpArithmeticT.         Expression9 ::= Expression10 OpArithmeticT Expression9 ;
ERecordField.           Expression10 ::= Expression11 "." Identifier ;
ETyped.                 Expression11 ::= Expression12 "::" Type ;
EApplication.           Expression12 ::= Expression12 "("  [Expression] ")";
ENegative.              Expression13 ::= "-" Expression ;
ELet.                   Expression13 ::= LetToken BindPattern "=" Expression LetContinuation Expression ;
ELiteral.               Expression13 ::= Literal ;
EVariable.              Expression13 ::= Identifier ;
EDo.                    Expression13 ::= "do" Expression ;
EParenthesis.           Expression13 ::= "(" Expression ")" ;
ETuple.                 Expression13 ::= "(" [Expression] ")" ;
EListSequence.          Expression13 ::= "[" Expression ".." Expression "]" ;
EListComprehension.     Expression13 ::= "[" Expression "|" [Comprehension] "]" ;
EList.                  Expression13 ::= "[" [Expression] "]" ;
ERecord.                Expression13 ::= "{" [RecordFieldAssignment] "}" ;
ERecordUpdate.          Expression13 ::= "{" Identifier "with" [RecordFieldAssignment] "}" ;
EIf.                    Expression13 ::= "if" Expression "then" Expression "else" Expression ;
EIfDo.                  Expression13 ::= "if" Expression "do" Expression ;
ELambda.                Expression13 ::= "\\" [Param] "->" Expression ;
EMatch.                 Expression13 ::= "match" Expression "with" StartingUnionSep [Alternate] ;

separator Expression13 "" ;
separator Expression "," ;

RecordFieldAssignment.  RecordFieldAssignment ::= Identifier "=" Expression ;
separator RecordFieldAssignment ";" ;

LCin.                   LetContinuation ::= "in" ;
LCline.                 LetContinuation ::= ;

Comprehension.          Comprehension ::= BindPattern "<-" Expression ;
separator Comprehension "," ;

Alternate.              Alternate ::= Pattern "->" Expression ;
separator Alternate "|" ;

PVariable.              Pattern ::= Identifier ;
PLiteral.               Pattern ::= Literal ;
PApplication.           Pattern ::= Identifier "(" Pattern ")" ;
PTuple.                 Pattern ::= "(" [Pattern] ")" ;
PList.                  Pattern ::= "[" [Pattern] "]" ;
PListHead.              Pattern ::= "(" Pattern ":" Pattern ")" ;
PListContains.          Pattern ::= "[" "..." Expression "..." "]" ;
PParenthesis.           Pattern ::= "(" Pattern ")" ;
PWildCard.              Pattern ::= "_" ;
PRecord.                Pattern ::= "{" [RecordPattern] "}" ;

separator Pattern "," ;

RecordPattern.          RecordPattern ::= Identifier "=" Pattern ;
separator RecordPattern ";" ;

BParenthesis.           BindPattern ::= "(" BindPattern ")" ;
BOp.                    BindPattern ::= "(" Op ")" [Param] ;
BRecord.                BindPattern ::= "{" [RecordBindPattern] "}" ;
BList.                  BindPattern ::= "[" [BindPattern] "]" ;
BTuple.                 BindPattern ::= "(" [BindPattern] ")" ;
BListHead.              BindPattern ::= "(" BindPattern ":" BindPattern ")" ;
BWildCard.              BindPattern ::= "_" ;
BVariable.              BindPattern ::= Identifier ;
BFunctionDecl.          BindPattern ::= Identifier [Param];


separator BindPattern "," ;

RecordBindPattern.      RecordBindPattern ::= Identifier "->" BindPattern ;
separator RecordBindPattern ";" ;