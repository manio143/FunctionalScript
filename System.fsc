(*
 * This is the type definition file
 * for a System object that holds 
 * functions with side effects.
 *)

data List<a> = Empty | Head of (a * List<a>)
let (:) h t = Head((h,t))

type Maybe<a> = None | Some of a

@toString :: a -> String

type Stream =
    {
        ReadLine :: () -> String    ;
        ReadChar :: () -> Char      ;
        ReadLazy :: () -> String    ;
        Read :: () -> a             ;
        ReadMaybe :: () -> Maybe<a> ;

        WriteLine :: String -> ()   ;
        WriteChar :: Char -> ()     ;
        Write :: a -> ()
    }

type IO =
    {
        OpenFile :: String -> Stream             ;
        CloseFile :: String -> ()                ;
        CreateInMemoryStream :: [Char] -> Stream ;
    }

type System = 
    {
        Console :: Stream          ;
        IO :: IO                   ;
        NoError :: Integer         ;
        Error :: String -> Integer ;
    }