

module AST where

-- Haskell module generated by the BNF converter




newtype Identifier = Identifier String
  deriving (Eq, Ord, Show, Read)
newtype TypeIdentifier = TypeIdentifier String
  deriving (Eq, Ord, Show, Read)
data Param = Parameter Identifier | Unit | WildCard
  deriving (Eq, Ord, Show, Read)

data Program = Program [Declaration]
  deriving (Eq, Ord, Show, Read)

data Declaration
    = TypeDeclaration Identifier [TypeIdentifier] TypeDefinition
    | DataTypeDeclaration Identifier [TypeIdentifier] [UnionDefinition]
    | TypeAnnotation Identifier Type
    | ValueDeclaration BindPattern Expression
  deriving (Eq, Ord, Show, Read)

data TypeDefinition
    = TDAlias Type
    | TDRecord [RecordTypeDefinition]
    | TDExtension Identifier [RecordTypeDefinition]
  deriving (Eq, Ord, Show, Read)

data Type
    = TList Type
    | TTuple [Type]
    | TRecord [RecordTypeDefinition]
    | TByName Identifier [Type]
    | TFunction Type Type
    | TParenthesis Type
    | TUnit
  deriving (Eq, Ord, Show, Read)

data UnionDefinition
    = UnionDefinitionEnum Identifier
    | UnionDefinitionTyped Identifier Type
  deriving (Eq, Ord, Show, Read)

data RecordTypeDefinition = RecordTypeDefinition Identifier Type
  deriving (Eq, Ord, Show, Read)

data TupleType = LTupleType Type
  deriving (Eq, Ord, Show, Read)

data Expression
    = EVariable Identifier
    | EConstructor Identifier Expression
    | ELiteral Literal
    | EInfixOp Expression Op Expression
    | EApplication Expression Expression
    | ENegative Expression
    | ELambda [Identifier] Expression
    | ELet BindPattern Expression
    | EIf Expression Expression Expression
    | EMatch Expression [Alternate]
    | EDo Expression
    | ETuple [Tuple]
    | EList [List]
    | EParenthesis Expression
    | ELeftSection Expression Op
    | ERightSection Op Expression
    | ERecordConstruction [RecordValue]
    | ERecordUpdate Identifier [RecordValue]
    | EListRange Expression Expression
    | EListComprehension Expression [Statement]
    | EExpressionWithTypeSig Expression Type
  deriving (Eq, Ord, Show, Read)

data RecordValue = RecordValue Identifier Expression
  deriving (Eq, Ord, Show, Read)

data Tuple = TupleElement Expression
  deriving (Eq, Ord, Show, Read)

data List = ListElement Expression
  deriving (Eq, Ord, Show, Read)

data Alternate = LAlternate Pattern Expression
  deriving (Eq, Ord, Show, Read)

data Pattern
    = PVariable Identifier
    | PLiteral Sign Literal
    | PApplication Identifier Pattern
    | PTuple [TuplePattern]
    | PList [ListPattern]
    | PListHead Pattern Pattern
    | PListContains Pattern
    | PParenthesis Pattern
    | PWildCard
    | PRecord [RecordPattern]
  deriving (Eq, Ord, Show, Read)

data TuplePattern = TuplePatternElem Pattern
  deriving (Eq, Ord, Show, Read)

data ListPattern = ListPatternElem Pattern
  deriving (Eq, Ord, Show, Read)

data RecordPattern = RecordPatternElem Identifier Pattern
  deriving (Eq, Ord, Show, Read)

data Literal
    = Char Char | String String | Integer Integer | Float Double
  deriving (Eq, Ord, Show, Read)

data Sign = NoSign | UnaryMinus
  deriving (Eq, Ord, Show, Read)

data Statement = LStatement BindPattern Expression
  deriving (Eq, Ord, Show, Read)

data BindPattern
    = BVariable Identifier
    | BTuple [BindPattern]
    | BList [Identifier]
    | BListHead BindPattern BindPattern
    | BParenthesis BindPattern
    | BWildCard
    | BRecord [RecordBindPattern]
    | BFunctionDecl Identifier [Param]
    | BOpDecl Op [Param]
  deriving (Eq, Ord, Show, Read)
  
data RecordBindPattern = RecordBindPatternElem Identifier Identifier
  deriving (Eq, Ord, Show, Read)

data Op = Operator String OpLevel
  deriving (Eq, Ord, Show, Read)

data OpLevel = 
  PipeLevel         -- <|, <||, <|||, |>, ||>, |||>, <$>, <$, $>
  | ComparisonLevel -- <, <=, ==, ===, >=, >, !=, /=, =/=
  | SubArithmetic   -- &&, ||, >>, <<, any user defined
  | Arithmetic1     -- +, -
  | Arithmetic2     -- *, /
  | Arithmetic3     -- **, ***, %, ^, &, |
    deriving (Eq, Ord, Show, Read)